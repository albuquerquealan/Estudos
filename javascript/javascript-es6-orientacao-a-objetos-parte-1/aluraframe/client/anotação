******************************************

Map que mapeia um array e cria um novo array seguindo os requisitos da função
let numeros = [3,2,11,20,8,7];
let novosNumeros = numeros.map((item)   => (item%2 +1 ) * item);
console.log(novosNumeros);


Quando fazemos o módulo de dois um número par, o que sobra é 0, somando-se 1,
e depois multiplicando pelo item, obtemos o mesmo item. Quando o número é impar, o modulo obtido é um, o qual incrementado dá 2.


*****************************************

Spread Operators 

Usamos ... antes do array passado como parâmetro. Cada item do array será passado para cada parâmetro recebido pela função. Inclusive isso vale para o constructor de uma classe.
function somaDoisNumeros(numero1, numero2) {
    return numero1 + numero2;                                            
}
numeros = [10,30];
console.log(somaDoisNumeros(...numeros)); 

*********************************************

Array function

*ANTES* 
let aprovados = avaliacoes
    .filter(function(prova) { return prova.nota >= 7; })
    .map(function(prova) { return prova.aluno.nome;});

*DEPOIS*
let aprovados = avaliacoes
    .filter((prova) => prova.nota >= 7)
    .map((prova) => prova.aluno.nome); 

    ///////////////////////////


var aprovados = avaliacoes
    .filter(prova =>   prova.nota >= 7 ) **Quando a arrow function possui apenas um parâmetro, podemos remover os parênteses.
    .map(prova => prova.aluno.nome);

console.log(aprovados);


********************************************************************************

TEMPLATE STRING 
´ usa-se o backstick e o ${variavel} para concatenar ou interpolação.

